import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as n,d as a,b as c,f as p,r as l}from"./app.4684ad3e.js";const i={},u=n("h1",{id:"栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈","aria-hidden":"true"},"#"),c(" 栈")],-1),r=n("p",null,"一个后进先出的数据结构",-1),k={href:"https://postimg.cc/SjvHj35H",target:"_blank",rel:"noopener noreferrer"},d=n("img",{src:"https://i.postimg.cc/X7jW10gN/OU-1-T-RW-8-YUVBN-1-YCJ5.png",alt:"OU-1-T-RW-8-YUVBN-1-YCJ5.png",loading:"lazy"},null,-1),v=p(`<p>在js中运用栈,就是js的push和pop方法</p><h2 id="栈的运用场景" tabindex="-1"><a class="header-anchor" href="#栈的运用场景" aria-hidden="true">#</a> 栈的运用场景</h2><p>需要后进先出的场景</p><p>比如：十进制转二进制，判断字符串的括号是否有效，函数调用堆栈</p><h2 id="什么变量保存在栈中" tabindex="-1"><a class="header-anchor" href="#什么变量保存在栈中" aria-hidden="true">#</a> 什么变量保存在栈中</h2><p>JS 的栈空间就是我们所说的调用栈，是用来存储执行上下文的，包含变量空间与词法环境，var、function保存在变量环境，let、const 声明的变量保存在词法环境中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
<span class="token punctuation">}</span>

<span class="token comment">// 函数调用</span>
<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行这段代码之前，JavaScript 引擎会先创建一个全局执行上下文，包含所有已声明的函数与变量：</p>`,8),m={href:"https://postimg.cc/21hRZYBV",target:"_blank",rel:"noopener noreferrer"},h=n("img",{src:"https://i.postimg.cc/8zn1xPpB/640.png",alt:"640.png",loading:"lazy"},null,-1),b=n("p",null,"从图中可以看出，代码中的全局变量 a 及函数 add 保存在变量环境中。",-1),g=n("p",null,"执行上下文准备好后，开始执行全局代码，首先执行 a = 1 的赋值操作",-1),f={href:"https://postimg.cc/sv131bch",target:"_blank",rel:"noopener noreferrer"},_=n("img",{src:"https://i.postimg.cc/xT38p2Nt/640-1.png",alt:"640-1.png",loading:"lazy"},null,-1),y=n("p",null,"赋值完成后 a 的值由 undefined 变为 1，然后执行 add 函数，JavaScript 判断出这是一个函数调用，然后执行以下操作：",-1),w=n("ul",null,[n("li",null,"首先，从全局执行上下文中，取出 add 函数代码"),n("li",null,"其次，对 add 函数的这段代码进行编译，并创建该函数的执行上下文和可执行代码，并将执行上下文压入栈中")],-1),x={href:"https://postimg.cc/xcsq4KsK",target:"_blank",rel:"noopener noreferrer"},S=n("img",{src:"https://i.postimg.cc/dVFdD6rS/640-2.png",alt:"640-2.png",loading:"lazy"},null,-1),j=n("ul",null,[n("li",null,"然后，执行代码，返回结果，并将 add 的执行上下文也会从栈顶部弹出，此时调用栈中就只剩下全局上下文了。")],-1),M={href:"https://postimg.cc/sv131bch",target:"_blank",rel:"noopener noreferrer"},V=n("img",{src:"https://i.postimg.cc/xT38p2Nt/640-1.png",alt:"640-1.png",loading:"lazy"},null,-1),z=n("p",null,"至此，整个函数调用执行结束了。",-1),B={href:"https://www.imagehub.cc/image/lPRUz",target:"_blank",rel:"noopener noreferrer"},N=n("img",{src:"https://s1.imagehub.cc/images/2022/12/27/0c7c61cfe095ef60bf6a9b36ae227385.png",alt:"0c7c61cfe095ef60bf6a9b36ae227385.png",loading:"lazy"},null,-1),O=p(`<p>上面需要注意的是：函数（add）在存放在栈区的数据，在函数调用结束后，就已经自动的出栈，换句话说：栈中的变量在函数调用结束后，就会自动回收。</p><p>所以，通常栈空间都不会设置太大，而基本类型在内存中占有固定大小的空间，所以它们的值保存在栈空间，我们通过 按值访问 。它们也不需要手动管理，函数调时创建，调用结束则消失。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局环境开始&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
 <span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;两次回到函数1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局环境结束&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),R={href:"https://postimg.cc/ZWpgZ3Sw",target:"_blank",rel:"noopener noreferrer"},q=n("img",{src:"https://i.postimg.cc/7ZWy3MQr/MRRAD9-BSX-I3-CMTGV-KCV0-V.png",alt:"MRRAD9-BSX-I3-CMTGV-KCV0-V.png",loading:"lazy"},null,-1),C=p(`<ol><li><p>首先是全局的执行环境入栈</p></li><li><p>在全局环境下调用了first函数,再把first函数的环境压入栈中</p></li><li><p>在first函数里面调用了second函数，再把second函数的环境压入栈中</p></li><li><p>second执行完毕，于是把second的执行环境从栈中移除(先进后出，后入先出)</p></li><li><p>回到first的执行环境，再把fist的代码执行完成，从执行栈中再移除</p></li><li><p>最后把全局的执行环境也出栈，整个程序执行完成</p></li></ol><h2 id="例题1" tabindex="-1"><a class="header-anchor" href="#例题1" aria-hidden="true">#</a> 例题1</h2><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) —— 将元素 x 推入栈中。</li><li>pop() —— 删除栈顶的元素。</li><li>*op() —— 获取栈顶元素。</li><li>getMin() —— 检索栈中的最小元素。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>MinStack minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minStack<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">&gt;</span> 返回 <span class="token operator">-</span><span class="token number">3.</span>
minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">--</span><span class="token operator">&gt;</span> 返回 <span class="token number">0.</span>
minStack<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">&gt;</span> 返回 <span class="token operator">-</span><span class="token number">2.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解答 在常数时间内检索到最小元素的栈，即仅需保证 getMin 的时间复杂度为 O(1) 即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">push</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> curMin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mins<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mins<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mins<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>curMin<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">top</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">getMin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mins<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：进栈O(1)，出栈O(n)，获取栈顶元素O(1)，获取最小元素O(1)</p><p>空间复杂度：O(n)</p><h2 id="入栈出栈相关题目" tabindex="-1"><a class="header-anchor" href="#入栈出栈相关题目" aria-hidden="true">#</a> 入栈出栈相关题目</h2><p>1、2、3、4依次入栈,可能的出栈顺序有哪些？</p><p>如果4先出，那么就是全部入栈了，只有4321一种情况。</p><p>如果3先出，那么4还没有入栈，此时栈内只有1,2,3，出栈必有3→2→1的顺序，4可以在3,2,1任意一个出栈后入栈，就有3421,3241,3214。</p><p>如果2先出，那么必有2→1的顺序，21都出栈后34才入栈，那么有2143和2134。2出栈后34都入栈，那么有2431和2341,2出栈后只有3入栈，那么是2314。</p><p>如果1先出，剩下的：2先出栈→243,234；3先出栈→342,324；4先出栈→432，那么就有1243,1234,1342,1324,1432。</p><h2 id="leetcode-有效的括号" tabindex="-1"><a class="header-anchor" href="#leetcode-有效的括号" aria-hidden="true">#</a> Leetcode:有效的括号</h2><p>给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号。   示例 1： 输入：s = &quot;()&quot; 输出：true</p><p>示例 2： 输入：s = &quot;()[]{}&quot; 输出：true</p><p>示例 3： 输入：s = &quot;(]&quot; 输出：false</p><h4 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h4><ol><li><p>新建一个栈</p></li><li><p>扫描字符串。遇到左括号入栈，遇到和栈顶括号类型匹配的右括号就出栈，类型不匹配直接判定为不合法</p></li><li><p>最后栈空了就合法，否则不合法</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">===</span><span class="token string">&#39;(&#39;</span><span class="token operator">||</span>c<span class="token operator">===</span><span class="token string">&#39;{&#39;</span><span class="token operator">||</span>c<span class="token operator">===</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> t <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">===</span><span class="token string">&#39;(&#39;</span><span class="token operator">&amp;&amp;</span> c<span class="token operator">===</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>t <span class="token operator">===</span><span class="token string">&#39;{&#39;</span><span class="token operator">&amp;&amp;</span> c<span class="token operator">===</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>t <span class="token operator">===</span><span class="token string">&#39;[&#39;</span><span class="token operator">&amp;&amp;</span> c<span class="token operator">===</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function T(I,J){const s=l("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[n("a",k,[d,a(s)])]),v,n("p",null,[n("a",m,[h,a(s)])]),b,g,n("p",null,[n("a",f,[_,a(s)])]),y,w,n("p",null,[n("a",x,[S,a(s)])]),j,n("p",null,[n("a",M,[V,a(s)])]),z,n("p",null,[n("a",B,[N,a(s)])]),O,n("p",null,[n("a",R,[q,a(s)])]),C])}const Y=t(i,[["render",T],["__file","Stack.html.vue"]]);export{Y as default};
