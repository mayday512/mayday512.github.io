import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as e}from"./app.4684ad3e.js";const t={},p=e(`<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><h2 id="js的面向对象" tabindex="-1"><a class="header-anchor" href="#js的面向对象" aria-hidden="true">#</a> js的面向对象</h2><ul><li>js中的对象被设计成一组属性的无序集合，像是一个哈希表，有key和value组成</li><li>key是一个标识符名称，value可以是任意类型，也可以是其他对象或者函数类型</li><li>如果值是一个函数，那么我们可以称之为是对象的方法</li></ul><h3 id="创建对象的方式" tabindex="-1"><a class="header-anchor" href="#创建对象的方式" aria-hidden="true">#</a> 创建对象的方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//通过new Object()</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;why&quot;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">running</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;在跑步&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//通过字面量</span>
<span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;why&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token comment">//js中没有严格意义的私有属性</span>
  <span class="token literal-property property">_address</span><span class="token operator">:</span><span class="token string">&quot;北京市&quot;</span>
  <span class="token function-variable function">running</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;在跑步&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建多个对象的方案</p><p>工厂模式：存在一个问题，我们在打印对象时，对象的类型都是Object类型 <img src="https://s1.imagehub.cc/images/2023/02/02/e062ed7f0c6c4cb4a3752b510cae63c8.jpeg" alt="e062ed7f0c6c4cb4a3752b510cae63c8.jpeg" loading="lazy"></p><p>构造函数方式：</p><p><img src="https://s1.imagehub.cc/images/2023/02/02/9bbe72e0b1653aa7919dff1559b26e47.jpeg" alt="9bbe72e0b1653aa7919dff1559b26e47.jpeg" loading="lazy"></p><blockquote><p>如果一个函数被new操作符调用了，那么它会执行如下操作：</p></blockquote><ol><li>在内存中创建一个新的对象（空对象）</li><li>这个对象内部的prototype属性会被赋值为该构造函数的prototype属性(<code>this.__proto__=foo.prototype</code>)</li><li>构造函数内部的this会指向创建出来的新对象</li><li>执行函数的内部代码</li><li>如果构造函数没有返回非空对象，则返回创建出来的对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;在吃东西&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;why&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1.88</span><span class="token punctuation">,</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数的缺点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//false</span>
<span class="token comment">//函数体代码都是一样的，没必要给每个对象创建函数对象，造成浪费空间</span>
p1<span class="token punctuation">.</span>eating <span class="token operator">===</span> p2<span class="token punctuation">.</span>eating 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原型和构造函数结合创建对象</p><p><img src="https://s1.imagehub.cc/images/2023/02/02/60c18d31c12ac32af9f2a1620343b433.jpeg" alt="60c18d31c12ac32af9f2a1620343b433.jpeg" loading="lazy"></p><h3 id="对对象属性的操作" tabindex="-1"><a class="header-anchor" href="#对对象属性的操作" aria-hidden="true">#</a> 对对象属性的操作</h3><ul><li>通过属性描述符可以精准的添加或者修改对象的属性</li><li>属性描述符需要使用Object.defineProperty（对象，属性，属性描述符）来对属性进行添加或修改</li><li>属性描述符有两种：数据属性，存取属性</li></ul><table><thead><tr><th></th><th>configurable</th><th>enumerable</th><th>value</th><th>writable</th><th>get</th><th>set</th></tr></thead><tbody><tr><td>数据描述符</td><td>可以</td><td>可以</td><td>可以</td><td>可以</td><td>不可以</td><td>不可以</td></tr><tr><td>存取描述符</td><td>可以</td><td>可以</td><td>不可以</td><td>不可以</td><td>可以</td><td>可以</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">数据描述符</p><ol><li>configurable：表示属性是否可以通过delete删除属性，是否可以修改它的特性，或者是否可以修改为存取属性</li></ol><ul><li>当我们直接在一个对象上定义某个属性时，这个属性的configurable为true</li><li>当我们通过属性描述符定义一个属性时，这个属性的configuarable为false</li></ul><ol start="2"><li>enumerable:表示属性是否可以通过for-in或者Object.keys()返回该属性；</li></ol><ul><li>当我们直接在一个对象上定义某个属性时，true</li><li>当我们通过属性描述符定义一个属性时，false</li></ul><ol start="3"><li>writable：表示是否可以修改属性的值</li></ol><ul><li>当我们直接在一个对象上定义某个属性时，true</li><li>当我们通过属性描述符定义一个属性时，false</li></ul><ol start="4"><li>value：属性的value值</li></ol><ul><li>默认情况下这个值是undefined</li></ul></div><div class="custom-container tip"><p class="custom-container-title">存取属性描述符</p><ol><li>get:获取属性时会执行的函数。默认值为undefined</li><li>set：设置属性时会执行的函数。默认值为undefined</li></ol></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建height属性，赋值</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token string">&quot;height&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">1.88</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//这里的height没有打印，因为该属性不可遍历</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
<span class="token comment">//隐藏某一个私有属性不希望被外界直接使用和赋值</span>
<span class="token comment">//如果我们希望截获某一个属性它访问和设置值的过程时，也会使用存取属性描述符</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_address
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_address <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&quot;上海市&quot;</span>
<span class="token comment">//定义多个属性描述符</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&quot;why&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.imagehub.cc/images/2023/02/02/53830aaa55a38f58ab56a182d1254369.jpeg" alt="53830aaa55a38f58ab56a182d1254369.jpeg" loading="lazy"></p><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><h3 id="对象的原型" tabindex="-1"><a class="header-anchor" href="#对象的原型" aria-hidden="true">#</a> 对象的原型</h3><ul><li>我们每个对象中都有一个[[prototype]],这个属性可以称之为对象的原型（隐式原型）</li></ul><blockquote><p>原型有什么用呢</p></blockquote><p>当我们从一个对象中获取某一个属性时，它会触发[[get]]操作：1. 在当前对象中查找对应的属性；2. 如果没有找到，会沿着它的原型链去查找[[prototype]]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数的原型" tabindex="-1"><a class="header-anchor" href="#函数的原型" aria-hidden="true">#</a> 函数的原型</h3><ul><li>函数作为对象来说，它也是有[[prototype]],它还会多出来一个显示原型prototype</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//true</span>
f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.imagehub.cc/images/2023/02/02/3b3d9e2a3583691574f73a2bdf76c87c.jpeg" alt="3b3d9e2a3583691574f73a2bdf76c87c.jpeg" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//真实开发中我们可以通过以下方式添加construction</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">&quot;constructor&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span>foo
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.imagehub.cc/images/2023/02/02/4ba7c33c7c115ccc1e52dd754e825d8d.jpeg" alt="4ba7c33c7c115ccc1e52dd754e825d8d.jpeg" loading="lazy"></p><h3 id="顶层原型" tabindex="-1"><a class="header-anchor" href="#顶层原型" aria-hidden="true">#</a> 顶层原型</h3><p><img src="https://s1.imagehub.cc/images/2023/02/07/80ba64dbb6689be11493aba973806c4c.jpeg" alt="80ba64dbb6689be11493aba973806c4c.jpeg" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;why&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&quot;北京市&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">//打印出来的是Object.prototype（===是true）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
<span class="token comment">//这样就形成了原型链</span>
obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> obj2
<span class="token comment">//把原型对象中的东西全部打印出来</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.imagehub.cc/images/2023/02/07/772f41a8ce797c0bdeafde447dd75f2c.jpeg" alt="772f41a8ce797c0bdeafde447dd75f2c.jpeg" loading="lazy"></p><p>构造函数的原型对象</p><p><img src="https://s1.imagehub.cc/images/2023/02/07/a4115a9b81207e7a0c0933c158a07ba2.jpeg" alt="a4115a9b81207e7a0c0933c158a07ba2.jpeg" loading="lazy"></p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>（该图隐藏了顶层原型）</p><h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h3><p><img src="https://s1.imagehub.cc/images/2023/02/07/b7ec729d6f9ca9e760f699b171bbf034.png" alt="b7ec729d6f9ca9e760f699b171bbf034.png" loading="lazy"></p><p><img src="https://s1.imagehub.cc/images/2023/02/07/eff7349e197993c574be604eda298db1.jpeg" alt="eff7349e197993c574be604eda298db1.jpeg" loading="lazy"></p><p>注意这段代码的顺序</p><blockquote><p>原型链实现继承的弊端</p></blockquote><ol><li>打印stu对象，继承属性看不到（比如name看不到，他不会打印原型上的东西）</li><li>创建两个stu对象，会相互影响（name不会，friend会） <img src="https://s1.imagehub.cc/images/2023/02/07/54bfff2f2700c8f486e2293d8ccca178.jpeg" alt="54bfff2f2700c8f486e2293d8ccca178.jpeg" loading="lazy"></li></ol><p><img src="https://s1.imagehub.cc/images/2023/02/07/961c8544824c736840b09f7b14e12a2c.jpeg" alt="961c8544824c736840b09f7b14e12a2c.jpeg" loading="lazy"></p><ol start="3"><li>在前面实现类的过程中都没有传递参数</li></ol><h3 id="借用构造函数继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数继承" aria-hidden="true">#</a> 借用构造函数继承</h3><p><img src="https://s1.imagehub.cc/images/2023/02/07/9df847c49e759467a7335b4b3ed9c763.jpeg" alt="9df847c49e759467a7335b4b3ed9c763.jpeg" loading="lazy"></p><p>上面的this是Student的this，将后续的name，friends等全部放入new出来的student对象，解决了上述全部弊端</p><p><img src="https://s1.imagehub.cc/images/2023/02/07/8db608ae699a103fde92417fe1b793b4.jpeg" alt="8db608ae699a103fde92417fe1b793b4.jpeg" loading="lazy"></p><blockquote><p>借用构造函数也有弊端：</p></blockquote><ol><li>Person函数至少被调用了两次(通过new和call)</li><li>stu的原型对象上会多出一些属性，但是这些属性没有必要存在</li></ol><h3 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承" aria-hidden="true">#</a> 原型式继承</h3><p><img src="https://s1.imagehub.cc/images/2023/02/08/bacbefb1cb36cb5e7cd09691f736f2e7.png" alt="bacbefb1cb36cb5e7cd09691f736f2e7.png" loading="lazy"></p><p>以下提供了三种方法</p><p><img src="https://s1.imagehub.cc/images/2023/02/08/cc668ea389796fb4893a9dcf7d60a59b.jpeg" alt="cc668ea389796fb4893a9dcf7d60a59b.jpeg" loading="lazy"></p><p>寄生式继承（了解）</p><p><img src="https://s1.imagehub.cc/images/2023/02/08/6dfabee5927c3d665c1ca680f9c41850.png" alt="6dfabee5927c3d665c1ca680f9c41850.png" loading="lazy"></p><p>寄生组合式继承</p><p><img src="https://s1.imagehub.cc/images/2023/02/08/237bd02c512f4c90680e307488f2e14d.png" alt="237bd02c512f4c90680e307488f2e14d.png" loading="lazy"></p><p><img src="https://s1.imagehub.cc/images/2023/02/08/2436e3ffe46e7ca459a65be01d088523.png" alt="2436e3ffe46e7ca459a65be01d088523.png" loading="lazy"></p><h2 id="对象方法的补充" tabindex="-1"><a class="header-anchor" href="#对象方法的补充" aria-hidden="true">#</a> 对象方法的补充</h2><p><img src="https://s1.imagehub.cc/images/2023/02/08/160e8ddff69e90b05f79e94e235ae6f7.png" alt="160e8ddff69e90b05f79e94e235ae6f7.png" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;why&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> info <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">//这个属性是加在info上的</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&quot;北京市&quot;</span>，
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//false 在原型上。不是info独有的</span>

<span class="token comment">//如果换做in操作符，两者都为true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token comment">//这个函数来自寄生式组合函数</span>
<span class="token function">inheritProtype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span>Person<span class="token punctuation">)</span>
<span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu instanof Student<span class="token punctuation">)</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu instanof Person<span class="token punctuation">)</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象函数原型之间的关系" tabindex="-1"><a class="header-anchor" href="#对象函数原型之间的关系" aria-hidden="true">#</a> 对象函数原型之间的关系</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;why&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">//对象里有一个隐式原型对象：__proto__</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token comment">//foo是一个函数，有一个显示原型对象：foo.prototype</span>
<span class="token comment">//foo.prototype来自哪里?创建了一个函数，foo.prototype = {constructor:foo}</span>
<span class="token comment">//foo是一个对象，有一个隐式原型对象：foo.__proto__</span>
<span class="token comment">//foo.__proto__来自哪里？new Function() foo.__proto__ = Function.prototype Function.prototype = {constructor:Function}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.imagehub.cc/images/2023/02/08/d2fa0c509a4e3d92d86af9fa7668d0af.jpeg" alt="d2fa0c509a4e3d92d86af9fa7668d0af.jpeg" loading="lazy"></p>`,73),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","4.html.vue"]]);export{d as default};
