import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,f as e}from"./app.4684ad3e.js";const t={},p=e(`<h1 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h1><h2 id="贪心算法是什么" tabindex="-1"><a class="header-anchor" href="#贪心算法是什么" aria-hidden="true">#</a> 贪心算法是什么</h2><ul><li>期盼通过每个阶段的局部最优选择，从而达到全局的最优</li><li>结果并不一定是最优</li></ul><p>比如零钱兑换</p><p><img src="https://s1.imagehub.cc/images/2023/01/11/9455bb5166a47d7d0b9b32c16c94e6bb.png" alt="9455bb5166a47d7d0b9b32c16c94e6bb.png" loading="lazy"></p><p>上面第二种就不是最优的</p><h2 id="leetcode-分饼干" tabindex="-1"><a class="header-anchor" href="#leetcode-分饼干" aria-hidden="true">#</a> leetcode：分饼干</h2><p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p><p>Each child has a greed factor , which is the minimum size of a cookie that the child will be content with; and each cookie has a size . If , we can assign the cookie to the child , and the child will be content. Your goal is to maximize the number of your content children and output the maximum number.ig[i]js[j]s[j] &gt;= g[i]jii</p><p>Example 1:</p><p>Input: g = [1,2,3], s = [1,1] Output: 1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1. Example 2:</p><p>Input: g = [1,2], s = [1,2,3] Output: 2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2.</p><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ul><li>局部最优 既能满足孩子，还消耗最少</li><li>先将较小的饼干分给胃口最小的孩子</li></ul><ol><li>对饼干数组和胃口数组升序排序</li><li>遍历饼干数组，找到能满足第一个孩子的饼干</li><li>然后继续遍历饼干数组，找到能满足第二、三、...、n个孩子的饼干</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//时间复杂度：O（nlogn）</span>
<span class="token comment">//空间复杂度：O（1）</span>
<span class="token keyword">var</span> <span class="token function-variable function">findContentChild</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g<span class="token punctuation">,</span>s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">sortFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token operator">-</span>b
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    g<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实现升序</span>
    s<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">{</span>
           i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_122-买卖股票的最佳时机" tabindex="-1"><a class="header-anchor" href="#_122-买卖股票的最佳时机" aria-hidden="true">#</a> 122.买卖股票的最佳时机</h2><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p><p>返回 你能获得的 最大 利润 。</p><p>示例 1：</p><p>输入：prices = [7,1,5,3,6,4] 输出：7 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。 总利润为 4 + 3 = 7 。 示例 2：</p><p>输入：prices = [1,2,3,4,5] 输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。 总利润为 4 。</p><h3 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1" aria-hidden="true">#</a> 解题思路</h3><ul><li>局部最优：见好就收，见差就不动，不做任何长远打算</li></ul><ol><li>新建一个变量统计总利润</li><li>遍历价格数组，如果当前价格比昨天高，就在昨天买今天卖，否则就不交易</li><li>遍历结束后，返回所有利润之和</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          profit <span class="token operator">+=</span> price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> profit
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(t,[["render",i],["__file","tanxing.html.vue"]]);export{d as default};
