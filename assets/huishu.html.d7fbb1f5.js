const e=JSON.parse('{"key":"v-a9c75f9a","path":"/zh/posts/js/huishu.html","title":"回溯","lang":"zh-CN","frontmatter":{"description":"回溯算法是一种渐进式寻找并构建问题解决方式的策略; \\r回溯算法会先从一个可能的动作开始解决问题，如果不行，就回溯并选择另一个动作，直到将问题解决（走一条路没走通就拐回来）; 46.全排列 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 示例 1： 输入：nums = [1,2,3] 输出：[[1,2,...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/js/huishu.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"回溯"}],["meta",{"property":"og:description","content":"回溯算法是一种渐进式寻找并构建问题解决方式的策略; \\r回溯算法会先从一个可能的动作开始解决问题，如果不行，就回溯并选择另一个动作，直到将问题解决（走一条路没走通就拐回来）; 46.全排列 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 示例 1： 输入：nums = [1,2,3] 输出：[[1,2,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://mister-hope.github.io/posts/js/huishu.html"}]]},"excerpt":"","headers":[{"level":2,"title":"46.全排列","slug":"_46-全排列","link":"#_46-全排列","children":[{"level":3,"title":"解题步骤","slug":"解题步骤","link":"#解题步骤","children":[]}]},{"level":2,"title":"子集","slug":"子集","link":"#子集","children":[{"level":3,"title":"解题步骤","slug":"解题步骤-1","link":"#解题步骤-1","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.52,"words":455},"filePathRelative":"zh/posts/js/huishu.md"}');export{e as data};
