import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as a,b as e,f as t,r as l}from"./app.4684ad3e.js";const i={},r=n("h1",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),e(" 链表")],-1),d=n("h2",{id:"什么是链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是链表","aria-hidden":"true"},"#"),e(" 什么是链表")],-1),u=n("p",null,"多个元素组成的列表，元素存储不连续，通过 next 指针来链接, 最底层为 null",-1),k={href:"https://postimg.cc/Lnh1PmLG",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://i.postimg.cc/rFNCvmmy/1-FWG-9-PYT-OOPPOR9-PN.png",alt:"1-FWG-9-PYT-OOPPOR9-PN.png",loading:"lazy"},null,-1),m=n("h2",{id:"数组与链表的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数组与链表的区别","aria-hidden":"true"},"#"),e(" 数组与链表的区别")],-1),h=n("p",null,"数组：增删非首尾元素时候往往需要移动元素",-1),b=n("p",null,"链表：增删非首位元素，不需要移动元素，只需修改next指针的指向",-1),g=n("h2",{id:"js中实现链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js中实现链表","aria-hidden":"true"},"#"),e(" js中实现链表")],-1),_=n("p",null,"通过object",-1),f={href:"https://postimg.cc/Thbwvhjd",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://i.postimg.cc/zDtRWgVg/R0-AZ-405-N0-RAJJ-ND-LQ.png",alt:"R0-AZ-405-N0-RAJJ-ND-LQ.png",loading:"lazy"},null,-1),x=t(`<p>插入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">val</span><span class="token operator">:</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
e<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>c<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="手写instanceof" tabindex="-1"><a class="header-anchor" href="#手写instanceof" aria-hidden="true">#</a> 手写instanceOf</h2><ol><li>instanceof 是什么？</li></ol><p>instanceof 是用来判断左侧对象是否是右侧构造函数的实例化对象，或则说左侧对象能否通过其隐式原型__ proto __在原型链上一层层向上查找到右侧函数的原型对象，即函数原型对象出现在实例对象的原型链上就返回 true。</p><p>原理：通过左侧对象的隐式原型属性 __ proto __ 在原型链上向上一层层查找，找到右侧构造函数的原型对象属性 prototype 就返回 true</p><ol start="2"><li>instanceof 使用方式：</li></ol><p>object instanceof 构造函数， 它有两个必传参数，左侧必须为对象类型，右侧必须为函数类型。返回值为 Boolean 类型。</p><p>注：js中万物皆对象，可能会误导大家出现这种写法： &#39;str&#39; instanceof String，返回值为false，因为 ‘str’ 就是简单的字符串，它和通过String构造函数(new String(&#39;str&#39;))创造出来的字符串是有区别的，可自行在控制台打印出来看，其值会封装成String对象类型的字符串，同理 new Number(3) instanceof Number, new Boolean(true) instanceof Boolean ……等等返回值为true。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span>

<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
test <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本数据类型只有通过对应类型构造函数创建出来成对象形式，才会是对应类型构造函数实例（true），直接写基本数据类型值则不是（false），毕竟上面有说到instanceof是用来判断左侧是不是右侧的实例对象，你连对象类型都不是怎么可能为true呢；引用类型可以直接作为左侧实例对象继承自右侧构造函数，返回值为true，如上面数组。</p><ol start="3"><li>手撕instanceof</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myInstanceOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 声明一个指针</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 遍历这个链表</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-删除链表中的节点" tabindex="-1"><a class="header-anchor" href="#leetcode-删除链表中的节点" aria-hidden="true">#</a> leetcode:删除链表中的节点</h2><p>有一个单链表的 head，我们想删除它其中的一个节点 node。</p><p>给你一个需要删除的节点 node 。你将 无法访问 第一个节点  head。</p><p>链表的所有值都是 唯一的，并且保证给定的节点 node 不是链表中的最后一个节点。</p><p>删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：</p><p>给定节点的值不应该存在于链表中。 链表中的节点数应该减少 1。 node 前面的所有值顺序相同。 node 后面的所有值顺序相同。 自定义测试：</p><p>对于输入，你应该提供整个链表 head 和要给出的节点 node。node 不应该是链表的最后一个节点，而应该是链表中的一个实际节点。 我们将构建链表，并将节点传递给你的函数。 输出将是调用你函数后的整个链表。   <img src="https://assets.leetcode.com/uploads/2020/09/01/node1.jpg" alt="" loading="lazy"></p><p>输入：head = [4,5,1,9], node = 5</p><p>输出：[4,1,9]</p><p>解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9</p><p><img src="https://assets.leetcode.com/uploads/2020/09/01/node2.jpg" alt="" loading="lazy"></p><p>输入：head = [4,5,1,9], node = 1 输出：[4,5,9] 解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9</p><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ol><li><p>无法获取被删除节点的上个节点，故不能直接改变上一个节点的next</p></li><li><p>将被删除节点转移到下个节点（例如 4-&gt;5-&gt;1-&gt;9，要删除1，可将9赋值给1，变成4-》5-》9-》9,再删除最后一个9）</p></li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 时间复杂和空间复杂度都是 O(1)</span>
<span class="token keyword">const</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 把当前链表的指针指向下下个链表的值就可以了</span>
  node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-反转链表" tabindex="-1"><a class="header-anchor" href="#leetcode-反转链表" aria-hidden="true">#</a> leetcode:反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="" loading="lazy"></p><p>输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1]</p><h3 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1" aria-hidden="true">#</a> 解题思路</h3>`,36),w={href:"https://postimg.cc/47SnYH2s",target:"_blank",rel:"noopener noreferrer"},j=n("img",{src:"https://i.postimg.cc/vTQnSWWg/0-LI-Y7-QJJIYYU-7-7-H43.png",alt:"0-LI-Y7-QJJIYYU-7-7-H43.png",loading:"lazy"},null,-1),L=t(`<p>双指针就相当于两个指针，一个指针指向2，一个指向1，紧接着2指向3，1指向2，直到靠前的指针走到链表尽头,只需在遍历过程中两个节点反转</p><h3 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span>
<span class="token comment">// 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span>

<span class="token comment">// 时间复杂度 O(n) n为链表的长度</span>
<span class="token comment">// 空间复杂度 O(1)</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// 创建一个指针</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>

  <span class="token comment">// 创建一个新指针</span>
  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// 遍历链表</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 创建一个临时变量</span>
    <span class="token keyword">const</span> tmp <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token comment">// 将当前节点的下一个节点指向新链表</span>
    p1<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>

    <span class="token comment">// 将新链表指向当前节点</span>
    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>

    <span class="token comment">// 将当前节点指向临时变量</span>
    p1 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 最后返回新的这个链表</span>
  <span class="token keyword">return</span> p2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-两数相加" tabindex="-1"><a class="header-anchor" href="#leetcode-两数相加" aria-hidden="true">#</a> leetcode:两数相加</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解题思路-2" tabindex="-1"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3>`,10),N={href:"https://postimg.cc/gnNkMTPr",target:"_blank",rel:"noopener noreferrer"},A=n("img",{src:"https://i.postimg.cc/BnGLnrY5/GCR-A8-O-PE-5-HB9-BJL-A.png",alt:"GCR-A8-O-PE-5-HB9-BJL-A.png",loading:"lazy"},null,-1),P=t(`<h3 id="代码-2" tabindex="-1"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//新建一个链表</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> l1<span class="token punctuation">;</span>  <span class="token comment">//指向链表头部</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">let</span> p3 <span class="token operator">=</span> l3<span class="token punctuation">;</span>

    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//十位数上的数</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">||</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//任意一个指针没有遍历完成</span>
        <span class="token keyword">const</span> v1 <span class="token operator">=</span> p1 <span class="token operator">?</span> p1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> v2 <span class="token operator">=</span> p2 <span class="token operator">?</span> p2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> val <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> carry<span class="token punctuation">;</span>
        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>val <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//获取十位数上的数</span>
        p3<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//获取个位上的数</span>
        <span class="token comment">// 指针向后移动一位</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        p3 <span class="token operator">=</span> p3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p3<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-环形链表" tabindex="-1"><a class="header-anchor" href="#leetcode-环形链表" aria-hidden="true">#</a> leetCode:环形链表</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token boolean">true</span>
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>（好比从同意起点跑步，快的会超慢的一圈）</p>`,10),R={href:"https://postimg.cc/d7vJrbxD",target:"_blank",rel:"noopener noreferrer"},O=n("img",{src:"https://i.postimg.cc/g0LrFdyy/RLW3-LCZDC6-PA1-LKREA-IQJ5.png",alt:"RLW3-LCZDC6-PA1-LKREA-IQJ5.png",loading:"lazy"},null,-1),C=t(`<h2 id="代码-3" tabindex="-1"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">hascycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//p2为快的那个指针</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&amp;&amp;</span>p2<span class="token operator">&amp;&amp;</span>p2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前端与链表-js-中的原型链" tabindex="-1"><a class="header-anchor" href="#前端与链表-js-中的原型链" aria-hidden="true">#</a> 前端与链表：JS 中的原型链</h2><ol><li><p>原型链的本质是链表</p></li><li><p>原型链上的各节点是各种原型对象，如：Founction.prototype、Object.prototype</p></li><li><p>原型链通过__proto__属性连接各种原型对象（普通链表是next）</p></li></ol><h3 id="原型链长啥样" tabindex="-1"><a class="header-anchor" href="#原型链长啥样" aria-hidden="true">#</a> 原型链长啥样</h3>`,5),J={href:"https://postimg.cc/cgwGrXs0",target:"_blank",rel:"noopener noreferrer"},B=n("img",{src:"https://i.postimg.cc/Y9yrDsZG/G15-IROF-SPVAF-C5-V-EVF.png",alt:"G15-IROF-SPVAF-C5-V-EVF.png",loading:"lazy"},null,-1),F=n("p",null,"中间的->就是__proto__",-1),V=n("h3",{id:"原型链知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原型链知识点","aria-hidden":"true"},"#"),e(" 原型链知识点")],-1),Y=n("ol",null,[n("li",null,[n("p",null,"如果A沿着原型链能找到B.prototype,那么A instanceof B为true")]),n("li",null,[n("p",null,"如果在A对象上没有找到x属性，那么会沿着原型链找x属性")])],-1),z={href:"https://postimg.cc/CZzgVbdH",target:"_blank",rel:"noopener noreferrer"},G=n("img",{src:"https://i.postimg.cc/VNFLnR8T/C-7-LWR-JPVCPE7-G-FG-4.png",alt:"C-7-LWR-JPVCPE7-G-FG-4.png",loading:"lazy"},null,-1),E=n("p",null,"分别打印出 value a ，undefined，value a，value b",-1),I=n("h3",{id:"使用链表指针获取-json-的节点值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用链表指针获取-json-的节点值","aria-hidden":"true"},"#"),e(" 使用链表指针获取 JSON 的节点值")],-1),S={href:"https://postimg.cc/RqSChJ3f",target:"_blank",rel:"noopener noreferrer"},D=n("img",{src:"https://i.postimg.cc/RCfWPc4P/UDH-2-H2-UEKLZYA-L23-B9-Y.png",alt:"UDH-2-H2-UEKLZYA-L23-B9-Y.png",loading:"lazy"},null,-1);function H(W,T){const s=l("ExternalLinkIcon");return o(),c("div",null,[r,d,u,n("p",null,[n("a",k,[v,a(s)])]),m,h,b,g,_,n("p",null,[n("a",f,[y,a(s)])]),x,n("p",null,[n("a",w,[j,a(s)])]),L,n("p",null,[n("a",N,[A,a(s)])]),P,n("p",null,[n("a",R,[O,a(s)])]),C,n("p",null,[n("a",J,[B,a(s)])]),F,V,Y,n("p",null,[n("a",z,[G,a(s)])]),E,I,n("p",null,[n("a",S,[D,a(s)])])])}const U=p(i,[["render",H],["__file","lianbiao.html.vue"]]);export{U as default};
