import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,d as t,b as a,f as l,r as c}from"./app.4684ad3e.js";const r={},i=n("h1",{id:"生命周期钩子函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#生命周期钩子函数","aria-hidden":"true"},"#"),a(" 生命周期钩子函数")],-1),d=n("p",null,"生命周期钩子函数：",-1),u={href:"https://postimg.cc/svXzQ3y6",target:"_blank",rel:"noopener noreferrer"},m=n("img",{src:"https://i.postimg.cc/J43zFhFL/QQ-20210102213904.jpg",alt:"QQ-20210102213904.jpg",loading:"lazy"},null,-1),k=n("p",null,"ps:不要在不要在钩子函数选项或回调上使用箭头函数，例如 created:()=>console.log（this.a）或 vm.$wat('a',newValue=>this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查直至找到为止，经常导致 Uncaught TypeError:Cannot read property of undefined 或 UncaughTypeError:this.myMethod is not a function 之类的错误。",-1),h={href:"https://postimg.cc/sG2XK8G3",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://i.postimg.cc/MH7QZJWf/QQ-20210102213904.jpg",alt:"QQ-20210102213904.jpg",loading:"lazy"},null,-1),g=n("p",null,"上述代码：首先在页面加载完后触发 beforeCreate、created、beforeMount、mounted，4 秒修改 msg 的内容为「孤云还空山，众鸟各已归。」，并触发 beforeUpdate 和 updated 钩子函数。",-1),b=n("hr",null,null,-1),f=n("h2",{id:"created和mouted",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#created和mouted","aria-hidden":"true"},"#"),a(" created和mouted")],-1),_=n("p",null,[a("created 是在实例创建完成后立即调用。在这一步，实例已完成了数据观测、属性和方法的运算，以及 watch/event 事件回调。然而，挂载阶段还没开始，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e"),n("mi",null,"l"),n("mtext",null,"属性目前不可见。所以不能操作"),n("mi",null,"D"),n("mi",null,"O"),n("mi",null,"M"),n("mtext",null,"元素，多用于初始化一些数据或方法。"),n("mi",null,"c"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"d"),n("mtext",null,"是在实例创建完成后立即调用。在这一步，实例已完成了数据观测、属性和方法的运算，以及"),n("mi",null,"w"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"c"),n("mi",null,"h"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"e"),n("mi",null,"v"),n("mi",null,"e"),n("mi",null,"n"),n("mi",null,"t"),n("mtext",null,"事件回调。然而，挂载阶段还没开始，")]),n("annotation",{encoding:"application/x-tex"},"el 属性目前不可见。所以不能操作 DOM 元素，多用于初始化一些数据或方法。 created 是在实例创建完成后立即调用。在这一步，实例已完成了数据观测、属性和方法的运算，以及 watch/event 事件回调。然而，挂载阶段还没开始，")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord cjk_fallback"},"属性目前不可见。所以不能操作"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"OM"),n("span",{class:"mord cjk_fallback"},"元素，多用于初始化一些数据或方法。"),n("span",{class:"mord mathnormal"},"cre"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord cjk_fallback"},"是在实例创建完成后立即调用。在这一步，实例已完成了数据观测、属性和方法的运算，以及"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord cjk_fallback"},"事件回调。然而，挂载阶段还没开始，")])])]),a("el 属性目前不可见。所以不能操作 DOM 元素，多用于初始化一些数据或方法。")],-1),x={href:"https://postimg.cc/cvzbJ8Bh",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://i.postimg.cc/yN64vmJM/QQ-20210102213904.jpg",alt:"QQ-20210102213904.jpg",loading:"lazy"},null,-1),M=l(`<hr><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p><img src="https://pic4.zhimg.com/80/v2-ba078d5d86e210c5492071b926c989c7_1440w.webp" alt="img" loading="lazy"></p><h2 id="onmounted" tabindex="-1"><a class="header-anchor" href="#onmounted" aria-hidden="true">#</a> onMounted()</h2><p>注册一个回调函数，在组件挂载完成后执行。 组件在以下情况下被视为已挂载：</p><p>1.其所有同步子组件都已经被挂载 (不包含异步组件或 <code>&lt;Suspense&gt;</code> 树内的组件)。</p><p>2.其自身的 DOM 树已经创建完成并插入了父容器中。注意仅当根容器在文档中时，才可以保证组件 DOM 树也在文档中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>    

    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    

    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>value <span class="token comment">// &lt;div&gt;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    

    <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">&quot;el&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码通过模板引用访问一个元素</p><hr><h2 id="onupdated" tabindex="-1"><a class="header-anchor" href="#onupdated" aria-hidden="true">#</a> onUpdated()</h2><p>注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。</p><p>父组件的更新钩子将在其子组件的更新钩子之后调用。</p><p>这个钩子会在组件的任意 DOM 更新后被调用，这些更新可能是由不同的状态变更导致的。如果你需要在某个特定的状态更改后访问更新后的 DOM，请使用 nextTick() 作为替代。</p><p>注意：不要在 updated 钩子中更改组件的状态，这可能会导致无限的更新循环！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onUpdated <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>    

    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    

    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 文本内容应该与当前的 \`count.value\` 一致</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    

    <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;count&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;count++&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码：访问更新后的 DOM</p><hr><h2 id="onunmounted" tabindex="-1"><a class="header-anchor" href="#onunmounted" aria-hidden="true">#</a> onUnmounted()</h2><p>一个组件在以下情况下被视为已卸载：</p><p>其所有子组件都已经被卸载。</p><p>所有相关的响应式作用 (渲染作用以及 setup() 时创建的计算属性和侦听器) 都已经停止。</p><p>可以在这个钩子中手动清理一些副作用，例如计时器、DOM 事件监听器或者与服务器的连接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>    

    <span class="token keyword">let</span> intervalId
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>    

    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="onbeforemount" tabindex="-1"><a class="header-anchor" href="#onbeforemount" aria-hidden="true">#</a> onBeforeMount()</h2><p>注册一个钩子，在组件被挂载之前被调用。</p><p>当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程。</p><hr><h2 id="onbeforeupdate" tabindex="-1"><a class="header-anchor" href="#onbeforeupdate" aria-hidden="true">#</a> onBeforeUpdate()</h2><p>注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</p><p>这个钩子可以用来在 Vue 更新 DOM 之前访问 DOM 状态。在这个钩子中更改状态也是安全的。</p><hr><h2 id="onbeforeunmount" tabindex="-1"><a class="header-anchor" href="#onbeforeunmount" aria-hidden="true">#</a> onBeforeUnmount()</h2><p>注册一个钩子，在组件实例被卸载之前调用。</p><p>当这个钩子被调用时，组件实例依然还保有全部的功能。</p><hr><h2 id="onerrorcaptured" tabindex="-1"><a class="header-anchor" href="#onerrorcaptured" aria-hidden="true">#</a> onErrorCaptured()</h2><p>注册一个钩子，在捕获了后代组件传递的错误时调用。</p><p>错误可以从以下几个来源中捕获：</p><ul><li>组件渲染</li><li>事件处理器</li><li>生命周期钩子</li><li>setup() 函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡钩子</li></ul><p>这个钩子带有三个实参：错误对象、触发该错误的组件实例，以及一个说明错误来源类型的信息字符串。</p><p>错误传递规则</p><ul><li><p>默认情况下，所有的错误都会被发送到应用级的 app.config.errorHandler (前提是这个函数已经定义)，这样这些错误都能在一个统一的地方报告给分析服务。</p></li><li><p>如果组件的继承链或组件链上存在多个 errorCaptured 钩子，对于同一个错误，这些钩子会被按从底至上的顺序一一调用。这个过程被称为“向上传递”，类似于原生 DOM 事件的冒泡机制。</p></li><li><p>如果 errorCaptured 钩子本身抛出了一个错误，那么这个错误和原来捕获到的错误都将被发送到 app.config.errorHandler。</p></li><li><p>errorCaptured 钩子可以通过返回 false 来阻止错误继续向上传递。即表示“这个错误已经被处理了，应当被忽略”，它将阻止其他的 errorCaptured 钩子或 app.config.errorHandler 因这个错误而被调用。</p></li></ul><h2 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive" aria-hidden="true">#</a> keep-alive</h2><p><img src="https://pic.imgdb.cn/item/63971053b1fccdcd367f1001.png" alt="" loading="lazy"></p><p><img src="https://pic.imgdb.cn/item/63971072b1fccdcd367f34da.png" alt="" loading="lazy"></p><p><img src="https://pic.imgdb.cn/item/63971094b1fccdcd367f5eee.png" alt="" loading="lazy"></p>`,48);function w(j,D){const s=c("ExternalLinkIcon");return p(),o("div",null,[i,d,n("p",null,[n("a",u,[m,t(s)])]),k,n("p",null,[n("a",h,[v,t(s)])]),g,b,f,_,n("p",null,[a("应用： "),n("a",x,[y,t(s)])]),M])}const z=e(r,[["render",w],["__file","lifeCycle.html.vue"]]);export{z as default};
