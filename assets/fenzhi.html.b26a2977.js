import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,f as e}from"./app.4684ad3e.js";const p={},t=e(`<h1 id="分而治之" tabindex="-1"><a class="header-anchor" href="#分而治之" aria-hidden="true">#</a> 分而治之</h1><h2 id="分治是什么" tabindex="-1"><a class="header-anchor" href="#分治是什么" aria-hidden="true">#</a> 分治是什么</h2><ol><li><p>他是算法设计的一种方法</p></li><li><p>他将问题分成多个贺原问题相似的小问题。递归解决小问题，再将结果合并以解决原来的问题</p></li></ol><h3 id="场景一-归并排序" tabindex="-1"><a class="header-anchor" href="#场景一-归并排序" aria-hidden="true">#</a> 场景一：归并排序</h3><ul><li><p>分：把数组从中间一分为二</p></li><li><p>解：递归地对两个子数组进行归并排序</p></li><li><p>合并有序子数组</p></li></ul><h3 id="场景二-快速排序" tabindex="-1"><a class="header-anchor" href="#场景二-快速排序" aria-hidden="true">#</a> 场景二：快速排序</h3><ul><li><p>选基准，按基准把数组分成两个子数组</p></li><li><p>递归地对两个子数组进行快速排序</p></li><li><p>对两个子数组进行合并</p></li></ul><h2 id="leetcode-翻转二叉树" tabindex="-1"><a class="header-anchor" href="#leetcode-翻转二叉树" aria-hidden="true">#</a> leetcode：翻转二叉树</h2><p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" alt="" loading="lazy"></p><p>Input: <code>root = [4,2,7,1,3,6,9]</code> Output: <code>[4,7,2,9,6,3,1]</code></p><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ul><li>分：获取左右子树</li><li>解：递归地翻转左右子树</li><li>合：将翻转后的左右子树换个位置放到根节点上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">val</span><span class="token operator">:</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token literal-property property">right</span><span class="token operator">:</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//时间：o（n）</span>
<span class="token comment">//空间：o（h) h是树的高度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-相同的树" tabindex="-1"><a class="header-anchor" href="#leetcode-相同的树" aria-hidden="true">#</a> leetcode：相同的树</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同（结构和节点值都相同）</p><p><img src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg" alt="" loading="lazy"></p><p>Input: <code>p = [1,2,3], q = [1,2,3]</code> Output: true</p><h3 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h3><ul><li>获取两个树的左右子树</li><li>递归判断两个数的左子树是否相同，右子树是否相同</li><li>将上述结果合并，如果根节点的值也相同，树就相同</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isSameTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>q</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">//两棵树都为空</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q p<span class="token punctuation">.</span>val<span class="token operator">===</span>q<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//根节点且左右子树相同</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token comment">//时间空间：O（n）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-对称二叉树" tabindex="-1"><a class="header-anchor" href="#leetcode-对称二叉树" aria-hidden="true">#</a> leetcode：对称二叉树</h2><p>给定一个二叉树，检查她为是否是镜像对称的</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="" loading="lazy"></p><p>Input: root = [1,2,2,3,4,4,3] Output: true</p><h3 id="解题步骤-1" tabindex="-1"><a class="header-anchor" href="#解题步骤-1" aria-hidden="true">#</a> 解题步骤</h3><ul><li>获取两个树的左子树和右子树</li><li>递归地判断树1的左子树和树2的右子树是否镜像，树1的右子树和树2的左子树是否镜像</li><li>如果上述成立，且根节点值也相同，两个树就镜像</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">isMirror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">//递归终点</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>val <span class="token operator">===</span> r<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>left<span class="token punctuation">,</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isMirror</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>right<span class="token punctuation">,</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
   
   <span class="token keyword">return</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[t];function c(l,i){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","fenzhi.html.vue"]]);export{d as default};
